TODOs:
- Test cases
    - Spyro benchmarks
    - One which requires conjunction for precision
- Add conjunction of properties Spyro-style
- Add disjunction to U, check for overfitting
- Bug: We get unsat for addFunc with no precision updating, when we should be able to increase precision even
  with no passed in counter examples by pairing [], 3 with [1,2,3]
- Issue: Adding disjunctions to U is super slow when calling sketch from Kotlin (doesn't observedly terminate), although
  it's fine from my command line
- For negative examples, don't just pick output from existing outputs which neq true output; we can pick from
  anything of the same type as long as it's not equal to the true output.

Writeup
- Future work: user-input feature extraction ie. not only len, but shape
- Need related works section
- Functions that don't return something with len are not really that good. One would think we can write down
  preconditions but no way of generating good negative examples for them so useless
- Don't narrate but present what learned and end state, not list everything we tried
- Future work: Idea: Prefer predicates that are false for other functions but true for this one. Like neg may.
               Problem: Functions might not even have the same type
               Solution: Randomly or bottom-up enumerate other functions of the same type. Prefer predicates that are
               different on target function and enumerated ones

Outdated OH notes:
Kevin can email the thing where he uses structs to make sketch print prettier
Or at least we can use example inputs of correct type for other functions
Might actually be better that we avoid uninterpreted functions.
More readable sketch maybe: create a sketch struct
    struct Prog(x = ??, y = ??,...)
    then prog = Prog
    int interpret(int input, Prog p) that needs a parser
    maybe can make generator return struct who knows if will do the thing
Note that we don't rly think about generics. ie all lists have to be for ex. int list or str list. shouldn't be that bad
to generalize. we accept this limitation bc kotlin reflection is confusing and we didn't bother making a nicer
representation of types. so. this for arbitrary kotlin library
